import torch
from torch.optim import Adam
from deps.pytorch_rl_il.rlil.agents import VaeBC
from deps.pytorch_rl_il.rlil.approximation import (BcqEncoder,
                                BcqDecoder)
from deps.pytorch_rl_il.rlil.memory import ExperienceReplayBuffer
from deps.pytorch_rl_il.dansah_custom.initializer import (get_device,
                              set_replay_buffer,
                              disable_on_policy_mode)
from .models import (fc_bcq_encoder,
                     fc_bcq_decoder)


def vae_bc(
        transitions=None,
        # Adam optimizer settings
        lr_enc=1e-3,
        lr_dec=1e-3,
        # Training settings
        minibatch_size=100,
):
    """
    VAE Behavioral Cloning (VAE-BC) control preset

    Args:
        transitions:
            dictionary of transitions generated by cpprb.ReplayBuffer.get_all_transitions() 
        lr_enc (float): Learning rate for the encoder.
        lr_dec (float): Learning rate for the decoder.
        minibatch_size (int): Number of experiences to sample in each training update.
    """
    def _vae_bc(env):
        disable_on_policy_mode()
        device = get_device()

        latent_dim = env.action_space.shape[0] * 2

        encoder_model = fc_bcq_encoder(env, latent_dim=latent_dim).to(device)
        encoder_optimizer = Adam(encoder_model.parameters(), lr=lr_enc)
        encoder = BcqEncoder(
            model=encoder_model,
            latent_dim=latent_dim,
            optimizer=encoder_optimizer,
            name="encoder",
        )
        decoder_model = fc_bcq_decoder(env, latent_dim=latent_dim).to(device)
        decoder_optimizer = Adam(decoder_model.parameters(), lr=lr_dec)
        decoder = BcqDecoder(
            model=decoder_model,
            latent_dim=latent_dim,
            space=env.action_space,
            optimizer=decoder_optimizer,
            name="decoder",
        )

        replay_buffer = ExperienceReplayBuffer(1e7, env)
        if transitions is not None:
            samples = replay_buffer.samples_from_cpprb(
                transitions, device="cpu")
            replay_buffer.store(samples)
        set_replay_buffer(replay_buffer)

        return VaeBC(
            encoder=encoder,
            decoder=decoder,
            minibatch_size=minibatch_size,
        )
    return _vae_bc


__all__ = ["vae_bc"]
